services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
      interval: 5s
      timeout: 5s
      retries: 5


  redis:
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data

  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    volumes:
      - ./scripts:/scripts
    entrypoint: ['/bin/sh']
    command: ['/scripts/init-minio.sh']
    restart: 'no'

  imagorvideo:
    image: ghcr.io/cshum/imagorvideo:latest
    restart: always
    ports:
      - '8080:8080'
    environment:
      IMAGOR_UNSAFE: 1
      # S3 loader â€” where get the originals
      IMAGOR_S3_LOADER_BUCKET: ${MINIO_BUCKET}
      IMAGOR_S3_LOADER_REGION: ${MINIO_REGION}
      IMAGOR_S3_LOADER_ENDPOINT: http://minio:9000
      IMAGOR_S3_LOADER_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      IMAGOR_S3_LOADER_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      IMAGOR_S3_LOADER_PATH_STYLE: true
      # S3 where to save the results
      IMAGOR_STORAGE_RESULT_STORAGE: s3
      IMAGOR_RESULT_STORAGE_PATH_STYLE: true
      IMAGOR_S3_STORAGE_BUCKET: ${MINIO_BUCKET}
      IMAGOR_S3_STORAGE_REGION: ${MINIO_REGION}
      IMAGOR_S3_STORAGE_ENDPOINT: http://minio:9000
      IMAGOR_S3_STORAGE_PATH_STYLE: true
      # MinIO credentials
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - minio
    command: --port=8080

  backend:
    build:
      context: .
    volumes:
      - /app/node_modules
      - ./logs:/app/logs
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public&connection_limit=10
      MINIO_ENDPOINT: http://minio:9000
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_REGION: ${MINIO_REGION}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      IMAGORVIDEO_URL: ${IMAGORVIDEO_URL}
      PORT: ${PORT}
      MAX_FILE_SIZE_IMAGE_MB: ${MAX_FILE_SIZE_IMAGE_MB}
      MAX_FILE_SIZE_VIDEO_MB: ${MAX_FILE_SIZE_VIDEO_MB}
      MAX_IMAGE_WIDTH: ${MAX_IMAGE_WIDTH}
      MAX_IMAGE_HEIGHT: ${MAX_IMAGE_HEIGHT}
      THUMBNAIL_SIZES: ${THUMBNAIL_SIZES}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
      imagorvideo:
        condition: service_started
      minio-init:
        condition: service_completed_successfully
    restart: on-failure
    command: sh -c "(npm run start:prod) | npx pino-pretty --colorize --singleLine"

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      - /app/node_modules
      - ./logs:/app/logs
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public&connection_limit=5
      MINIO_ENDPOINT: http://minio:9000
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_REGION: ${MINIO_REGION}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      IMAGORVIDEO_URL: http://imagorvideo:8080
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
      imagorvideo:
        condition: service_started
      minio-init:
        condition: service_completed_successfully
    restart: on-failure
    command: sh -c "node dist/worker/main.js | npx pino-pretty --colorize --singleLine"

volumes:
  db-data:
  minio-data: