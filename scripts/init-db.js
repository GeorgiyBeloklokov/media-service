const { execSync } = require('child_process');

async function initDatabase() {
  console.log('üîÑ Initializing database...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
    execSync('npx prisma migrate status', { stdio: 'pipe' });
    console.log('‚úÖ Database is already initialized');
  } catch (error) {
    console.log('üì¶ Database not initialized, creating schema...');
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
      console.log('‚úÖ Migrations applied successfully');
    } catch (migrateError) {
      console.log('üîß No migrations found, pushing schema directly...');
      
      try {
        // –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ—Ç, –ø—É—à–∏–º —Å—Ö–µ–º—É –Ω–∞–ø—Ä—è–º—É—é
        execSync('npx prisma db push', { stdio: 'inherit' });
        console.log('‚úÖ Database schema created successfully');
      } catch (pushError) {
        console.error('‚ùå Failed to initialize database:', pushError.message);
        process.exit(1);
      }
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
  try {
    execSync('npx prisma generate', { stdio: 'inherit' });
    console.log('‚úÖ Prisma Client generated successfully');
  } catch (generateError) {
    console.error('‚ùå Failed to generate Prisma Client:', generateError.message);
    process.exit(1);
  }
}

initDatabase();